# Generated from c:/Users/atom0/OneDrive/Documents/GitHub/python/PPL/assignment3/initial/src/main/minigo/parser/MiniGo.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,65,490,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,
        71,2,72,7,72,2,73,7,73,2,74,7,74,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,
        1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,
        1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
        11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,
        14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,
        16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,
        18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,
        22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,
        27,1,28,1,28,1,28,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,
        32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,
        37,1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,
        42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,
        48,1,49,1,49,1,50,1,50,1,51,1,51,1,51,5,51,346,8,51,10,51,12,51,
        349,9,51,1,52,1,52,1,52,5,52,354,8,52,10,52,12,52,357,9,52,3,52,
        359,8,52,1,53,1,53,1,53,4,53,364,8,53,11,53,12,53,365,1,54,1,54,
        1,54,4,54,371,8,54,11,54,12,54,372,1,55,1,55,1,55,4,55,378,8,55,
        11,55,12,55,379,1,56,1,56,1,56,3,56,385,8,56,1,56,3,56,388,8,56,
        1,57,1,57,1,57,5,57,393,8,57,10,57,12,57,396,9,57,1,57,1,57,1,58,
        4,58,401,8,58,11,58,12,58,402,1,58,1,58,1,59,4,59,408,8,59,11,59,
        12,59,409,1,59,1,59,1,60,1,60,1,60,1,60,5,60,418,8,60,10,60,12,60,
        421,9,60,1,60,1,60,1,60,1,60,5,60,427,8,60,10,60,12,60,430,9,60,
        1,60,1,60,3,60,434,8,60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,5,61,
        443,8,61,10,61,12,61,446,9,61,1,61,1,61,1,61,1,61,1,61,1,62,1,62,
        1,63,1,63,1,64,1,64,1,65,3,65,460,8,65,1,66,1,66,1,67,1,67,1,68,
        1,68,1,69,1,69,1,70,1,70,3,70,472,8,70,1,70,4,70,475,8,70,11,70,
        12,70,476,1,71,4,71,480,8,71,11,71,12,71,481,1,72,1,72,1,73,1,73,
        1,74,1,74,1,74,2,428,444,0,75,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,
        17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,
        39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,
        61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,
        83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,
        52,105,53,107,54,109,55,111,56,113,57,115,58,117,59,119,60,121,61,
        123,62,125,63,127,64,129,65,131,0,133,0,135,0,137,0,139,0,141,0,
        143,0,145,0,147,0,149,0,1,0,18,1,0,49,57,2,0,66,66,98,98,2,0,79,
        79,111,111,2,0,88,88,120,120,2,0,34,34,92,92,1,0,10,10,3,0,9,9,13,
        13,32,32,2,0,10,10,13,13,3,0,65,90,95,95,97,122,1,0,48,57,1,0,48,
        49,1,0,48,55,3,0,48,57,65,70,97,102,2,0,69,69,101,101,2,0,43,43,
        45,45,1,0,39,39,1,0,34,34,5,0,34,34,92,92,110,110,114,114,116,116,
        500,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
        0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
        0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,
        0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,
        0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,
        0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,
        0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,
        0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,
        0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,
        0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,
        0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,
        0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,
        119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,
        0,0,0,129,1,0,0,0,1,151,1,0,0,0,3,156,1,0,0,0,5,159,1,0,0,0,7,165,
        1,0,0,0,9,170,1,0,0,0,11,174,1,0,0,0,13,181,1,0,0,0,15,186,1,0,0,
        0,17,193,1,0,0,0,19,203,1,0,0,0,21,209,1,0,0,0,23,213,1,0,0,0,25,
        222,1,0,0,0,27,228,1,0,0,0,29,232,1,0,0,0,31,237,1,0,0,0,33,243,
        1,0,0,0,35,247,1,0,0,0,37,254,1,0,0,0,39,260,1,0,0,0,41,268,1,0,
        0,0,43,270,1,0,0,0,45,272,1,0,0,0,47,274,1,0,0,0,49,276,1,0,0,0,
        51,278,1,0,0,0,53,281,1,0,0,0,55,284,1,0,0,0,57,286,1,0,0,0,59,289,
        1,0,0,0,61,291,1,0,0,0,63,294,1,0,0,0,65,297,1,0,0,0,67,300,1,0,
        0,0,69,302,1,0,0,0,71,304,1,0,0,0,73,306,1,0,0,0,75,309,1,0,0,0,
        77,312,1,0,0,0,79,315,1,0,0,0,81,318,1,0,0,0,83,321,1,0,0,0,85,324,
        1,0,0,0,87,326,1,0,0,0,89,328,1,0,0,0,91,330,1,0,0,0,93,332,1,0,
        0,0,95,334,1,0,0,0,97,336,1,0,0,0,99,338,1,0,0,0,101,340,1,0,0,0,
        103,342,1,0,0,0,105,358,1,0,0,0,107,360,1,0,0,0,109,367,1,0,0,0,
        111,374,1,0,0,0,113,381,1,0,0,0,115,389,1,0,0,0,117,400,1,0,0,0,
        119,407,1,0,0,0,121,433,1,0,0,0,123,437,1,0,0,0,125,452,1,0,0,0,
        127,454,1,0,0,0,129,456,1,0,0,0,131,459,1,0,0,0,133,461,1,0,0,0,
        135,463,1,0,0,0,137,465,1,0,0,0,139,467,1,0,0,0,141,469,1,0,0,0,
        143,479,1,0,0,0,145,483,1,0,0,0,147,485,1,0,0,0,149,487,1,0,0,0,
        151,152,5,102,0,0,152,153,5,117,0,0,153,154,5,110,0,0,154,155,5,
        99,0,0,155,2,1,0,0,0,156,157,5,105,0,0,157,158,5,102,0,0,158,4,1,
        0,0,0,159,160,5,98,0,0,160,161,5,114,0,0,161,162,5,101,0,0,162,163,
        5,97,0,0,163,164,5,107,0,0,164,6,1,0,0,0,165,166,5,101,0,0,166,167,
        5,108,0,0,167,168,5,115,0,0,168,169,5,101,0,0,169,8,1,0,0,0,170,
        171,5,102,0,0,171,172,5,111,0,0,172,173,5,114,0,0,173,10,1,0,0,0,
        174,175,5,114,0,0,175,176,5,101,0,0,176,177,5,116,0,0,177,178,5,
        117,0,0,178,179,5,114,0,0,179,180,5,110,0,0,180,12,1,0,0,0,181,182,
        5,116,0,0,182,183,5,121,0,0,183,184,5,112,0,0,184,185,5,101,0,0,
        185,14,1,0,0,0,186,187,5,115,0,0,187,188,5,116,0,0,188,189,5,114,
        0,0,189,190,5,117,0,0,190,191,5,99,0,0,191,192,5,116,0,0,192,16,
        1,0,0,0,193,194,5,105,0,0,194,195,5,110,0,0,195,196,5,116,0,0,196,
        197,5,101,0,0,197,198,5,114,0,0,198,199,5,102,0,0,199,200,5,97,0,
        0,200,201,5,99,0,0,201,202,5,101,0,0,202,18,1,0,0,0,203,204,5,99,
        0,0,204,205,5,111,0,0,205,206,5,110,0,0,206,207,5,115,0,0,207,208,
        5,116,0,0,208,20,1,0,0,0,209,210,5,118,0,0,210,211,5,97,0,0,211,
        212,5,114,0,0,212,22,1,0,0,0,213,214,5,99,0,0,214,215,5,111,0,0,
        215,216,5,110,0,0,216,217,5,116,0,0,217,218,5,105,0,0,218,219,5,
        110,0,0,219,220,5,117,0,0,220,221,5,101,0,0,221,24,1,0,0,0,222,223,
        5,114,0,0,223,224,5,97,0,0,224,225,5,110,0,0,225,226,5,103,0,0,226,
        227,5,101,0,0,227,26,1,0,0,0,228,229,5,110,0,0,229,230,5,105,0,0,
        230,231,5,108,0,0,231,28,1,0,0,0,232,233,5,116,0,0,233,234,5,114,
        0,0,234,235,5,117,0,0,235,236,5,101,0,0,236,30,1,0,0,0,237,238,5,
        102,0,0,238,239,5,97,0,0,239,240,5,108,0,0,240,241,5,115,0,0,241,
        242,5,101,0,0,242,32,1,0,0,0,243,244,5,105,0,0,244,245,5,110,0,0,
        245,246,5,116,0,0,246,34,1,0,0,0,247,248,5,115,0,0,248,249,5,116,
        0,0,249,250,5,114,0,0,250,251,5,105,0,0,251,252,5,110,0,0,252,253,
        5,103,0,0,253,36,1,0,0,0,254,255,5,102,0,0,255,256,5,108,0,0,256,
        257,5,111,0,0,257,258,5,97,0,0,258,259,5,116,0,0,259,38,1,0,0,0,
        260,261,5,98,0,0,261,262,5,111,0,0,262,263,5,111,0,0,263,264,5,108,
        0,0,264,265,5,101,0,0,265,266,5,97,0,0,266,267,5,110,0,0,267,40,
        1,0,0,0,268,269,5,43,0,0,269,42,1,0,0,0,270,271,5,45,0,0,271,44,
        1,0,0,0,272,273,5,42,0,0,273,46,1,0,0,0,274,275,5,47,0,0,275,48,
        1,0,0,0,276,277,5,37,0,0,277,50,1,0,0,0,278,279,5,61,0,0,279,280,
        5,61,0,0,280,52,1,0,0,0,281,282,5,33,0,0,282,283,5,61,0,0,283,54,
        1,0,0,0,284,285,5,60,0,0,285,56,1,0,0,0,286,287,5,60,0,0,287,288,
        5,61,0,0,288,58,1,0,0,0,289,290,5,62,0,0,290,60,1,0,0,0,291,292,
        5,62,0,0,292,293,5,61,0,0,293,62,1,0,0,0,294,295,5,38,0,0,295,296,
        5,38,0,0,296,64,1,0,0,0,297,298,5,124,0,0,298,299,5,124,0,0,299,
        66,1,0,0,0,300,301,5,33,0,0,301,68,1,0,0,0,302,303,5,58,0,0,303,
        70,1,0,0,0,304,305,5,61,0,0,305,72,1,0,0,0,306,307,5,43,0,0,307,
        308,5,61,0,0,308,74,1,0,0,0,309,310,5,45,0,0,310,311,5,61,0,0,311,
        76,1,0,0,0,312,313,5,42,0,0,313,314,5,61,0,0,314,78,1,0,0,0,315,
        316,5,47,0,0,316,317,5,61,0,0,317,80,1,0,0,0,318,319,5,37,0,0,319,
        320,5,61,0,0,320,82,1,0,0,0,321,322,5,58,0,0,322,323,5,61,0,0,323,
        84,1,0,0,0,324,325,5,46,0,0,325,86,1,0,0,0,326,327,5,40,0,0,327,
        88,1,0,0,0,328,329,5,41,0,0,329,90,1,0,0,0,330,331,5,123,0,0,331,
        92,1,0,0,0,332,333,5,125,0,0,333,94,1,0,0,0,334,335,5,91,0,0,335,
        96,1,0,0,0,336,337,5,93,0,0,337,98,1,0,0,0,338,339,5,44,0,0,339,
        100,1,0,0,0,340,341,5,59,0,0,341,102,1,0,0,0,342,347,3,131,65,0,
        343,346,3,131,65,0,344,346,3,133,66,0,345,343,1,0,0,0,345,344,1,
        0,0,0,346,349,1,0,0,0,347,345,1,0,0,0,347,348,1,0,0,0,348,104,1,
        0,0,0,349,347,1,0,0,0,350,359,5,48,0,0,351,355,7,0,0,0,352,354,3,
        133,66,0,353,352,1,0,0,0,354,357,1,0,0,0,355,353,1,0,0,0,355,356,
        1,0,0,0,356,359,1,0,0,0,357,355,1,0,0,0,358,350,1,0,0,0,358,351,
        1,0,0,0,359,106,1,0,0,0,360,361,5,48,0,0,361,363,7,1,0,0,362,364,
        3,135,67,0,363,362,1,0,0,0,364,365,1,0,0,0,365,363,1,0,0,0,365,366,
        1,0,0,0,366,108,1,0,0,0,367,368,5,48,0,0,368,370,7,2,0,0,369,371,
        3,137,68,0,370,369,1,0,0,0,371,372,1,0,0,0,372,370,1,0,0,0,372,373,
        1,0,0,0,373,110,1,0,0,0,374,375,5,48,0,0,375,377,7,3,0,0,376,378,
        3,139,69,0,377,376,1,0,0,0,378,379,1,0,0,0,379,377,1,0,0,0,379,380,
        1,0,0,0,380,112,1,0,0,0,381,382,3,105,52,0,382,384,5,46,0,0,383,
        385,3,143,71,0,384,383,1,0,0,0,384,385,1,0,0,0,385,387,1,0,0,0,386,
        388,3,141,70,0,387,386,1,0,0,0,387,388,1,0,0,0,388,114,1,0,0,0,389,
        394,3,147,73,0,390,393,8,4,0,0,391,393,3,149,74,0,392,390,1,0,0,
        0,392,391,1,0,0,0,393,396,1,0,0,0,394,392,1,0,0,0,394,395,1,0,0,
        0,395,397,1,0,0,0,396,394,1,0,0,0,397,398,3,147,73,0,398,116,1,0,
        0,0,399,401,7,5,0,0,400,399,1,0,0,0,401,402,1,0,0,0,402,400,1,0,
        0,0,402,403,1,0,0,0,403,404,1,0,0,0,404,405,6,58,0,0,405,118,1,0,
        0,0,406,408,7,6,0,0,407,406,1,0,0,0,408,409,1,0,0,0,409,407,1,0,
        0,0,409,410,1,0,0,0,410,411,1,0,0,0,411,412,6,59,1,0,412,120,1,0,
        0,0,413,414,5,47,0,0,414,415,5,47,0,0,415,419,1,0,0,0,416,418,8,
        7,0,0,417,416,1,0,0,0,418,421,1,0,0,0,419,417,1,0,0,0,419,420,1,
        0,0,0,420,434,1,0,0,0,421,419,1,0,0,0,422,423,5,47,0,0,423,424,5,
        42,0,0,424,428,1,0,0,0,425,427,8,7,0,0,426,425,1,0,0,0,427,430,1,
        0,0,0,428,429,1,0,0,0,428,426,1,0,0,0,429,431,1,0,0,0,430,428,1,
        0,0,0,431,432,5,42,0,0,432,434,5,47,0,0,433,413,1,0,0,0,433,422,
        1,0,0,0,434,435,1,0,0,0,435,436,6,60,1,0,436,122,1,0,0,0,437,438,
        5,47,0,0,438,439,5,42,0,0,439,444,1,0,0,0,440,443,3,123,61,0,441,
        443,9,0,0,0,442,440,1,0,0,0,442,441,1,0,0,0,443,446,1,0,0,0,444,
        445,1,0,0,0,444,442,1,0,0,0,445,447,1,0,0,0,446,444,1,0,0,0,447,
        448,5,42,0,0,448,449,5,47,0,0,449,450,1,0,0,0,450,451,6,61,1,0,451,
        124,1,0,0,0,452,453,9,0,0,0,453,126,1,0,0,0,454,455,9,0,0,0,455,
        128,1,0,0,0,456,457,9,0,0,0,457,130,1,0,0,0,458,460,7,8,0,0,459,
        458,1,0,0,0,460,132,1,0,0,0,461,462,7,9,0,0,462,134,1,0,0,0,463,
        464,7,10,0,0,464,136,1,0,0,0,465,466,7,11,0,0,466,138,1,0,0,0,467,
        468,7,12,0,0,468,140,1,0,0,0,469,471,7,13,0,0,470,472,7,14,0,0,471,
        470,1,0,0,0,471,472,1,0,0,0,472,474,1,0,0,0,473,475,7,9,0,0,474,
        473,1,0,0,0,475,476,1,0,0,0,476,474,1,0,0,0,476,477,1,0,0,0,477,
        142,1,0,0,0,478,480,7,9,0,0,479,478,1,0,0,0,480,481,1,0,0,0,481,
        479,1,0,0,0,481,482,1,0,0,0,482,144,1,0,0,0,483,484,7,15,0,0,484,
        146,1,0,0,0,485,486,7,16,0,0,486,148,1,0,0,0,487,488,5,92,0,0,488,
        489,7,17,0,0,489,150,1,0,0,0,23,0,345,347,355,358,365,372,379,384,
        387,392,394,402,409,419,428,433,442,444,459,471,476,481,2,1,58,0,
        6,0,0
    ]

class MiniGoLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    FUNC = 1
    IF = 2
    BREAK = 3
    ELSE = 4
    FOR = 5
    RETURN = 6
    TYPE = 7
    STRUCT = 8
    INTERFACE = 9
    CONST = 10
    VAR = 11
    CONTINUE = 12
    RANGE = 13
    NIL = 14
    TRUE = 15
    FALSE = 16
    INT_TYPE = 17
    STRING_TYPE = 18
    FLOAT_TYPE = 19
    BOOL_TYPE = 20
    PLUS = 21
    MINUS = 22
    MULT = 23
    DIV = 24
    MOD = 25
    EQUALS = 26
    NOT_EQUALS = 27
    LESS = 28
    LESS_EQUALS = 29
    GREATER = 30
    GREATER_EQUALS = 31
    LOGICAL_AND = 32
    LOGICAL_OR = 33
    LOGICAL_NOT = 34
    COLON = 35
    ASSIGN = 36
    PLUS_ASSIGN = 37
    MINUS_ASSIGN = 38
    MULT_ASSIGN = 39
    DIV_ASSIGN = 40
    MOD_ASSIGN = 41
    DECLARE_ASSIGN = 42
    ACCESS = 43
    L_PAREN = 44
    R_PAREN = 45
    L_CURLY = 46
    R_CURLY = 47
    L_BRACKET = 48
    R_BRACKET = 49
    COMMA = 50
    SEMI = 51
    ID = 52
    DECIMAL_LIT = 53
    BINARY_LIT = 54
    OCTAL_LIT = 55
    HEX_LIT = 56
    FLOAT_LIT = 57
    STRING_LIT = 58
    TERMINATOR = 59
    WS = 60
    LINE_COMMENT = 61
    COMMENT = 62
    ERROR_CHAR = 63
    ILLEGAL_ESCAPE = 64
    UNCLOSE_STRING = 65

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'func'", "'if'", "'break'", "'else'", "'for'", "'return'", 
            "'type'", "'struct'", "'interface'", "'const'", "'var'", "'continue'", 
            "'range'", "'nil'", "'true'", "'false'", "'int'", "'string'", 
            "'float'", "'boolean'", "'+'", "'-'", "'*'", "'/'", "'%'", "'=='", 
            "'!='", "'<'", "'<='", "'>'", "'>='", "'&&'", "'||'", "'!'", 
            "':'", "'='", "'+='", "'-='", "'*='", "'/='", "'%='", "':='", 
            "'.'", "'('", "')'", "'{'", "'}'", "'['", "']'", "','", "';'" ]

    symbolicNames = [ "<INVALID>",
            "FUNC", "IF", "BREAK", "ELSE", "FOR", "RETURN", "TYPE", "STRUCT", 
            "INTERFACE", "CONST", "VAR", "CONTINUE", "RANGE", "NIL", "TRUE", 
            "FALSE", "INT_TYPE", "STRING_TYPE", "FLOAT_TYPE", "BOOL_TYPE", 
            "PLUS", "MINUS", "MULT", "DIV", "MOD", "EQUALS", "NOT_EQUALS", 
            "LESS", "LESS_EQUALS", "GREATER", "GREATER_EQUALS", "LOGICAL_AND", 
            "LOGICAL_OR", "LOGICAL_NOT", "COLON", "ASSIGN", "PLUS_ASSIGN", 
            "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "DECLARE_ASSIGN", 
            "ACCESS", "L_PAREN", "R_PAREN", "L_CURLY", "R_CURLY", "L_BRACKET", 
            "R_BRACKET", "COMMA", "SEMI", "ID", "DECIMAL_LIT", "BINARY_LIT", 
            "OCTAL_LIT", "HEX_LIT", "FLOAT_LIT", "STRING_LIT", "TERMINATOR", 
            "WS", "LINE_COMMENT", "COMMENT", "ERROR_CHAR", "ILLEGAL_ESCAPE", 
            "UNCLOSE_STRING" ]

    ruleNames = [ "FUNC", "IF", "BREAK", "ELSE", "FOR", "RETURN", "TYPE", 
                  "STRUCT", "INTERFACE", "CONST", "VAR", "CONTINUE", "RANGE", 
                  "NIL", "TRUE", "FALSE", "INT_TYPE", "STRING_TYPE", "FLOAT_TYPE", 
                  "BOOL_TYPE", "PLUS", "MINUS", "MULT", "DIV", "MOD", "EQUALS", 
                  "NOT_EQUALS", "LESS", "LESS_EQUALS", "GREATER", "GREATER_EQUALS", 
                  "LOGICAL_AND", "LOGICAL_OR", "LOGICAL_NOT", "COLON", "ASSIGN", 
                  "PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", 
                  "MOD_ASSIGN", "DECLARE_ASSIGN", "ACCESS", "L_PAREN", "R_PAREN", 
                  "L_CURLY", "R_CURLY", "L_BRACKET", "R_BRACKET", "COMMA", 
                  "SEMI", "ID", "DECIMAL_LIT", "BINARY_LIT", "OCTAL_LIT", 
                  "HEX_LIT", "FLOAT_LIT", "STRING_LIT", "TERMINATOR", "WS", 
                  "LINE_COMMENT", "COMMENT", "ERROR_CHAR", "ILLEGAL_ESCAPE", 
                  "UNCLOSE_STRING", "LETTER", "DIGIT", "BIN_DIGIT", "OCTAL_DIGIT", 
                  "HEX_DIGIT", "EXP_LIT", "FRAC_LIT", "SQ", "DQ", "ESCAPE" ]

    grammarFileName = "MiniGo.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    last_token = None
    def emit(self):
        tk = self.type
        if tk == self.UNCLOSE_STRING:       
            result = super().emit();
            raise UncloseString(result.text);
        elif tk == self.ILLEGAL_ESCAPE:
            result = super().emit();
            raise IllegalEscape(result.text);
        elif tk == self.ERROR_CHAR:
            result = super().emit();
            raise ErrorToken(result.text); 
        else:
            self.last_token = super().emit()
            return super().emit();
            


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[58] = self.TERMINATOR_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def TERMINATOR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:

                switch_list = [
                    self.ID,
                    self.DECIMAL_LIT,self.BINARY_LIT,self.OCTAL_LIT,self.HEX_LIT,
                    self.FLOAT_LIT,
                    self.STRING_LIT,
                    self.TRUE,self.FALSE,
                    self.NIL,
                    self.INT_TYPE,self.FLOAT_TYPE,self.BOOL_TYPE,self.STRING_TYPE,
                    self.RETURN,self.CONTINUE,self.BREAK
                    ,self.R_PAREN,self.R_BRACKET,self.R_CURLY]
                if self.last_token and self.last_token.type in switch_list:
                    self._type = self.SEMI
                    self._text = ';'
                else:
                    self.skip()

     


